package klass.model.meta.domain

interface Element
{
}

interface NamedElement
    implements Element
{
    name: String key maximumLength(256);
    ordinal: Integer private;
}

class PackageableElement
    abstract
    implements NamedElement
{
    packageName: String maximumLength(100000);

    // fullyQualifiedName: String = packageName + "." + name;
}

class Enumeration
    extends PackageableElement
{
}

class EnumerationLiteral implements NamedElement
{
    enumerationName               : String key maximumLength(256);
    prettyName                    : String? maximumLength(256);
}

association EnumerationHasLiterals
{
    enumeration: Enumeration[1..1];
    enumerationLiterals: EnumerationLiteral[1..*] owned
        orderBy: this.ordinal ascending;
}

// TODO: Ordinals should have a syntax and be inferred using macros
class Classifier
    abstract
    extends PackageableElement
{
}

// TODO: Error when transient extends non-transient
class Interface
    extends Classifier
{
}

class ClassifierInterfaceMapping
{
    classifierName: String key private maximumLength(256);
    interfaceName: String key private maximumLength(256);
    ordinal: Integer private;
}

association ClassifierHasClassifierInterfaceMapping
{
    subClassifier: Classifier[1..1];
    superInterfaces               : ClassifierInterfaceMapping[0..*] owned
        orderBy: this.ordinal ascending;
}

association ClassifierInterfaceMappingHasInterface
{
    subClassifiers: ClassifierInterfaceMapping[0..*];
    superInterface                : Interface[1..1];
}

class ClassifierModifier
    implements Element
{
    classifierName: String key maximumLength(256);
    keyword: String key maximumLength(256);
    ordinal: Integer private;
}

association ClassifierHasModifiers
{
    owningClassifier: Classifier[1..1];
    classifierModifiers: ClassifierModifier[0..*] owned
        orderBy: this.ordinal ascending;
}

class Klass
    extends Classifier
{
    superClassName: String? private maximumLength(256);
    abstractClass: Boolean;
}

// TODO: Why isn't subClasses showing up in generated code? Reladomo bug?
association ClassHasSuperClass
{
    subClasses                    : Klass[0..*];
    superClass                    : Klass[0..1];

    // TODO: When this was backwards, I got a confusing error. How can I detect and prevent?
    relationship this.superClassName == Klass.name
}

enumeration PrimitiveType
{
    INTEGER("Integer"),
    LONG("Long"),
    DOUBLE("Double"),
    FLOAT("Float"),
    BOOLEAN("Boolean"),
    STRING("String"),
    INSTANT("Instant"),
    LOCAL_DATE("LocalDate"),
    TEMPORAL_INSTANT("TemporalInstant"),
    TEMPORAL_RANGE("TemporalRange"),
}

enumeration Multiplicity
{
    ZERO_TO_ONE("0..1"),
    ONE_TO_ONE("1..1"),
    ZERO_TO_MANY("0..*"),
    ONE_TO_MANY("1..*"),
}

class DataTypeProperty
    abstract
    implements NamedElement
{
    classifierName                : String key maximumLength(256);
    optional                      : Boolean;
}

class PrimitiveProperty
    extends DataTypeProperty
{
    primitiveType                 : PrimitiveType maximumLength(256);
}

class EnumerationProperty
    extends DataTypeProperty
{
    enumerationName               : String private maximumLength(256);
}

association EnumerationPropertyHasEnumeration
{
    enumerationProperties         : EnumerationProperty[0..*];
    enumeration                   : Enumeration[1..1];
}

// TODO: Change the orderBy syntax to orderBy(this.ordinal)
association ClassifierHasDataTypeTypeProperties
{
    owningClassifier              : Classifier[1..1];
    dataTypeProperties            : DataTypeProperty[0..*] owned
        orderBy: this.ordinal ascending;
}

interface NumericPropertyValidation
    implements Element
{
    classifierName                : String key maximumLength(256);
    propertyName                  : String key maximumLength(256);
    number: Integer;
}

class MinLengthPropertyValidation
    implements NumericPropertyValidation
{
}

class MaxLengthPropertyValidation
    implements NumericPropertyValidation
{
}

class MinPropertyValidation
    implements NumericPropertyValidation
{
}

class MaxPropertyValidation
    implements NumericPropertyValidation
{
}

association DataTypePropertyHasMinLengthPropertyValidation
{
    dataTypeProperty              : DataTypeProperty[1..1];
    minLengthValidation           : MinLengthPropertyValidation[0..1] owned;

    relationship this.classifierName == MinLengthPropertyValidation.classifierName
            && this.name == MinLengthPropertyValidation.propertyName
}

association DataTypePropertyHasMaxLengthPropertyValidation
{
    dataTypeProperty              : DataTypeProperty[1..1];
    maxLengthValidation           : MaxLengthPropertyValidation[0..1] owned;

    relationship this.classifierName == MaxLengthPropertyValidation.classifierName
            && this.name == MaxLengthPropertyValidation.propertyName
}

association PrimitivePropertyHasMinPropertyValidation
{
    primitiveProperty             : PrimitiveProperty[1..1];
    minValidation                 : MinPropertyValidation[0..1] owned;

    relationship this.classifierName == MinPropertyValidation.classifierName
            && this.name == MinPropertyValidation.propertyName
}

association PrimitivePropertyHasMaxPropertyValidation
{
    primitiveProperty             : PrimitiveProperty[1..1];
    maxValidation                 : MaxPropertyValidation[0..1] owned;

    relationship this.classifierName == MaxPropertyValidation.classifierName
            && this.name == MaxPropertyValidation.propertyName
}

class PropertyModifier
    implements Element
{
    classifierName: String key maximumLength(256);
    propertyName: String key maximumLength(256);
    keyword: String key maximumLength(256);
    ordinal: Integer private;
}

association DataTypePropertyHasModifiers
{
    dataTypeProperty              : DataTypeProperty[1..1];
    propertyModifiers             : PropertyModifier[0..*]
        orderBy: this.ordinal ascending;

    relationship this.classifierName == PropertyModifier.classifierName
            && this.name == PropertyModifier.propertyName
}

class Parameter
    abstract
    implements NamedElement
{
    id: Long key id;
    // name isn't key
    name: String maximumLength(256);
    multiplicity: Multiplicity maximumLength(256);
}

class EnumerationParameter
    extends Parameter
{
    enumerationName: String private maximumLength(256);
}

class PrimitiveParameter
    extends Parameter
{
    primitiveType: PrimitiveType maximumLength(256);
}

class ExpressionValue
    abstract
{
    id      : Long key id;
}

class UserLiteral
    extends ExpressionValue
{
}

class NullLiteral
    extends ExpressionValue
{
}

class VariableReference
    extends ExpressionValue
{
    parameterId: Long private;
}

class MemberReferencePath
    abstract
    extends ExpressionValue
{
    className: String private maximumLength(256);
    propertyClassName: String private maximumLength(256);
    propertyName: String private maximumLength(256);
}

association VariableReferenceHasParameter
{
    variableReferences: VariableReference[0..*];
    parameter: Parameter[1..1];
}

class Criteria
    abstract
    implements Element
{
    id: Long id key;
    string: String derived;
}

class AllCriteria
    extends Criteria
{
}

class BinaryCriteria
    abstract
    extends Criteria
{
    leftId        : Long private;
    rightId       : Long private;
}

class AndCriteria
    extends BinaryCriteria
{
}

class OrCriteria
    extends BinaryCriteria
{
}

enumeration Operator
{
    EQUALS("=="),
    NOT_EQUALS("!="),
    LESS_THAN("<"),
    GREATER_THAN(">"),
    LESS_THAN_EQUAL("<="),
    GREATER_THAN_EQUAL(">="),
    IN("in"),
    CONTAINS("contains"),
    STARTS_WITH("startsWith"),
    ENDS_WITH("endsWith"),
}

class OperatorCriteria
    extends Criteria
{
    sourceExpressionId: Long private;
    targetExpressionId: Long private;
    operator: Operator maximumLength(256);
}

class EdgePointCriteria
    extends Criteria
{
    memberReferencePathId: Long private;
}

enumeration AssociationEndDirection
{
    SOURCE("source"),
    TARGET("target"),
}

class Association
    extends PackageableElement
{
    criteriaId: Long private;

    source(): AssociationEnd[1..1]
    {
        this.name == AssociationEnd.associationName
            && AssociationEnd.direction == AssociationEndDirection.SOURCE
    }

    target(): AssociationEnd[1..1]
    {
        this.name == AssociationEnd.associationName
            && AssociationEnd.direction == AssociationEndDirection.TARGET
    }
}

class AssociationEnd implements NamedElement
{
    owningClassName               : String key private maximumLength(256);
    associationName               : String maximumLength(256);
    resultTypeName                : String private maximumLength(256);
    direction                     : AssociationEndDirection maximumLength(256);
    multiplicity                  : Multiplicity maximumLength(256);
}

// TODO: Consider moving the foreign keys onto Association (sourceClassName, sourceName, targetClassName, targetClass)
// simplification, ideally we'd model an association as having exactly two ends
association AssociationHasEnds
{
    owningAssociation: Association[1..1];
    associationEnds: AssociationEnd[0..*] owned
        orderBy: this.direction ascending;
}

association ClassHasAssociationEnds
{
    owningClass: Klass[1..1];
    associationEnds: AssociationEnd[0..*];
        // TODO Order by paths, not just properties
        // orderBy: this.owningAssociation.ordinal ascending;

    relationship this.name == AssociationEnd.owningClassName
}

association AssociationEndHasResultType
{
    associationEndsResultTypeOf: AssociationEnd[0..*];
    resultType: Klass[1..1];

    relationship this.resultTypeName == Klass.name
}

class AssociationEndModifier
    implements Element
{
    owningClassName   : String key maximumLength(256);
    associationEndName: String key maximumLength(256);
    keyword           : String key maximumLength(256);
    ordinal           : Integer private;
}

association AssociationEndHasModifiers
{
    associationEnd: AssociationEnd[1..1];
    associationEndModifiers: AssociationEndModifier[0..*] owned
        orderBy: this.ordinal ascending;

    relationship this.owningClassName == AssociationEndModifier.owningClassName
            && this.name == AssociationEndModifier.associationEndName
}

association AssociationHasCriteria
{
    association: Association[0..1];
    criteria: Criteria[1..1] owned;
}

association OperatorCriteriaHasSourceExpressionValue
{
    operatorCriteriaSourceOf: OperatorCriteria[0..1];
    sourceExpressionValue: ExpressionValue[1..1] owned;

    relationship this.sourceExpressionId == ExpressionValue.id
}

association OperatorCriteriaHasTargetExpressionValue
{
    operatorCriteriaTargetOf: OperatorCriteria[0..1];
    targetExpressionValue: ExpressionValue[1..1] owned;

    relationship this.targetExpressionId == ExpressionValue.id
}

association EdgePointCriteriaHasMemberReferencePath
{
    edgePointCriteria: EdgePointCriteria[0..1];
    memberReferencePath: MemberReferencePath[1..1];
}

association EnumerationParameterHasEnumeration
{
    enumerationParameters: EnumerationParameter[0..*];
    enumeration: Enumeration[1..1];
}

association MemberReferencePathHasClass
{
    memberReferencePaths: MemberReferencePath[0..*];
    klass: Klass[1..1];

    relationship this.className == Klass.name
}

class MemberReferencePathAssociationEndMapping
{
    memberReferencePathId: Long key private;
    associationOwningClassName: String key private maximumLength(256);
    associationEndName: String key private maximumLength(256);
    ordinal: Integer private;
}

association MemberReferencePathHasMemberReferencePathAssociationEndMapping
{
    memberReferencePath: MemberReferencePath[1..1];
    associationEnds: MemberReferencePathAssociationEndMapping[0..*] owned
        orderBy: this.ordinal ascending;
}

association MemberReferencePathAssociationEndMappingHasAssociationEnd
{
    memberReferencePaths: MemberReferencePathAssociationEndMapping[0..*];
    associationEnd: AssociationEnd[1..1];

    relationship this.associationOwningClassName == AssociationEnd.owningClassName
            && this.associationEndName == AssociationEnd.name
}

association DataTypePropertyHasMemberReferencePaths
{
    memberReferencePaths: MemberReferencePath[0..*];
    dataTypeProperty: DataTypeProperty[1..1];

    relationship this.propertyClassName == DataTypeProperty.classifierName
            && this.propertyName == DataTypeProperty.name
}

class ThisMemberReferencePath
    extends MemberReferencePath
{
}

class TypeMemberReferencePath
    extends MemberReferencePath
{
}

association BinaryCriteriaHasLeft
{
    ownerOfLeftCriteria : BinaryCriteria[0..1];
    left                : Criteria[1..1];

    relationship this.leftId == Criteria.id
}

association BinaryCriteriaHasRight
{
    ownerOfRightCriteria: BinaryCriteria[0..1];
    right               : Criteria[1..1];

    relationship this.rightId == Criteria.id
}

class ParameterizedProperty
    implements NamedElement
{
    owningClassName               : String key private maximumLength(256);
    resultTypeName                : String private maximumLength(256);
    multiplicity                  : Multiplicity maximumLength(256);
}

association ClassHasParameterizedProperties
{
    owningClass: Klass[1..1];
    parameterizedProperties: ParameterizedProperty[0..*] owned
        orderBy: this.ordinal ascending;

    relationship this.name == ParameterizedProperty.owningClassName
}

enumeration OrderByDirection
{
    ASCENDING("ascending"),
    DESCENDING("descending"),
}

class AssociationEndOrderBy
{
    associationEndClassName: String key private maximumLength(256);
    associationEndName: String key private maximumLength(256);
    thisMemberReferencePathId: Long key private;
    orderByDirection: OrderByDirection maximumLength(256);
    ordinal: Integer private;
}

association AssociationEndHasOrderBy
{
    associationEnd: AssociationEnd[1..1];
    orderBys: AssociationEndOrderBy[0..*] owned
        orderBy: this.ordinal ascending;

    relationship this.owningClassName == AssociationEndOrderBy.associationEndClassName
            && this.name == AssociationEndOrderBy.associationEndName
}

association AssociationEndOrderByHasMemberReferencePath
{
    associationEndOrderBy: AssociationEndOrderBy[0..1];
    thisMemberReferencePath: ThisMemberReferencePath[1..1];
}

association ParameterizedPropertyHasResultType
{
    parameterizedPropertiesResultTypeOf: ParameterizedProperty[0..*];
    resultType: Klass[1..1];

    relationship this.resultTypeName == Klass.name
}

class ParameterizedPropertyOrdering
{
    owningClassName               : String private key maximumLength(256);
    name                          : String key maximumLength(256);
    ordinal: Integer;
}

association ParameterizedPropertyHasOrdering
{
    parameterizedProperty: ParameterizedProperty[1..1];
    parameterizedPropertyOrderings: ParameterizedPropertyOrdering[0..*] owned
        orderBy: this.ordinal ascending;

    relationship this.owningClassName == ParameterizedPropertyOrdering.owningClassName
            && this.name == ParameterizedPropertyOrdering.name
}

class ParameterizedPropertyParameter implements NamedElement
{
    classifierName                : String key private maximumLength(256);
    parameterizedPropertyName     : String key maximumLength(256);
    ordinal: Integer private;
}

association ParameterizedPropertyHasParameters
{
    parameterizedProperty         : ParameterizedProperty[1..1];
    parameters                    : ParameterizedPropertyParameter[0..*]
        orderBy: this.ordinal ascending;

    relationship this.owningClassName == ParameterizedPropertyParameter.classifierName
            && this.name == ParameterizedPropertyParameter.parameterizedPropertyName
}

class ProjectionElement
    abstract
    implements NamedElement
{
    id  : Long key id;
    parentId: Long? private;
    // TODO: Write a test that fails if name is a key
    // name isn't key
    name: String maximumLength(256);
}

// TODO: Rename to Projection, but clashes with names in generated code.
class RootProjection
    extends ProjectionElement
{
    classifierName: String private maximumLength(256);
}

class NamedProjection
    extends PackageableElement
{
    projectionId: Long private;
}

association NamedProjectionHasRootProjection
{
    namedProjection: NamedProjection[0..1];
    rootProjection: RootProjection[1..1];

    relationship this.projectionId == RootProjection.id
}

// TODO: When abstract class extends abstract class, validate that they have compatible inheritance types
class ProjectionWithAssociationEnd
    abstract
    extends ProjectionElement
{
    // TODO: Overriding a property (to make it required) should not create a new column
    // parentId                      : Long private;
    associationEndClass           : String private maximumLength(256);
    associationEndName: String private maximumLength(256);
}

class ProjectionReferenceProperty
    extends ProjectionWithAssociationEnd
{
    // TODO: Overriding a property (to make it required) should not create a new column
    // parentId                      : Long private;
}

class ProjectionProjectionReference
    extends ProjectionWithAssociationEnd
{
    projectionName                  : String private maximumLength(256);
    // TODO: Overriding a property (to make it required) should not create a new column
    // parentId                      : Long private;
}

class ProjectionDataTypeProperty
    extends ProjectionElement
{
    // TODO: Overriding a property (to make it required) should not create a new column
    // parentId                      : Long private;
    propertyClassifierName        : String private maximumLength(256);
    propertyName: String private maximumLength(256);
}

association ProjectionElementHasChildren
{
    parent                        : ProjectionElement[0..1];
    children                      : ProjectionElement[0..*]
        orderBy: this.ordinal ascending;

    relationship this.id == ProjectionElement.parentId
}

association ProjectionWithAssociationEndHasAssociationEnd
{
    projectionsWithAssociationEnd : ProjectionWithAssociationEnd[0..*];
    associationEnd                : AssociationEnd[1..1];

    relationship this.associationEndClass == AssociationEnd.owningClassName
            && this.associationEndName == AssociationEnd.name
}

association ProjectionDataTypePropertyHasDataTypeProperty
{
    projectionDataTypeProperties  : ProjectionDataTypeProperty[0..*];
    dataTypeProperty              : DataTypeProperty[1..1];

    relationship this.propertyClassifierName == DataTypeProperty.classifierName
            && this.propertyName == DataTypeProperty.name
}

association RootProjectionHasClassifier
{
    projections: RootProjection[0..*];
    classifier : Classifier[1..1];
}

association ProjectionProjectionReferenceHasProjection
{
    projectionProjectionReferences: ProjectionProjectionReference[0..*];
    projection                    : NamedProjection[1..1];

    relationship this.projectionName == NamedProjection.name
}

class ServiceGroup
    extends PackageableElement
{
    className                     : String private maximumLength(256);
}

association ServiceGroupHasClass
{
    serviceGroups                 : ServiceGroup[0..*];
    owningClass                   : Klass[1..1];

    relationship this.className == Klass.name
}

class Url
    implements Element
{
    serviceGroupName              : String key maximumLength(256);
    url                           : String key maximumLength(8192);
    ordinal: Integer private;
}

enumeration UrlParameterType
{
    QUERY("query"),
    PATH("path"),
}

class UrlParameter
    implements Element
{
    serviceGroupName              : String key private maximumLength(256);
    urlString                     : String key private maximumLength(8192);
    parameterId                   : Long key private;
    type                          : UrlParameterType;
    ordinal: Integer private;
}

association UrlHasUrlParameters
{
    url: Url[1..1];
    parameters                    : UrlParameter[0..*] owned
        orderBy: this.ordinal ascending;

    relationship this.serviceGroupName == UrlParameter.serviceGroupName
            && this.url == UrlParameter.urlString
}

association UrlParameterHasParameter
{
    urlParameter                  : UrlParameter[0..1];
    parameter                     : Parameter[1..1];
}

association ServiceGroupHasUrls
{
    serviceGroup                  : ServiceGroup[1..1];
    urls                          : Url[1..*] owned
        orderBy: this.ordinal ascending;

    relationship this.name == Url.serviceGroupName
}

enumeration ServiceMultiplicity
{
    ONE("one"),
    MANY("many"),
}

enumeration Verb
{
    GET,
    POST,
    PUT,
    PATCH,
    DELETE,
}

class Service
    implements Element
{
    serviceGroupName              : String key maximumLength(256);
    urlString                     : String key maximumLength(8192);
    verb                          : Verb key maximumLength(256);
    projectionName                : String? private maximumLength(256);
    queryCriteriaId               : Long? private;
    authorizeCriteriaId           : Long? private;
    validateCriteriaId            : Long? private;
    conflictCriteriaId            : Long? private;
    serviceMultiplicity           : ServiceMultiplicity maximumLength(256);
    ordinal: Integer private;
}

association UrlHasServices
{
    url: Url[1..1];
    services                      : Service[1..*] owned
        orderBy: this.ordinal ascending;

    relationship this.serviceGroupName == Service.serviceGroupName
            && this.url == Service.urlString
}

association ServiceHasProjection
{
    services: Service[0..*];
    projection                    : NamedProjection[0..1];

    relationship this.projectionName == NamedProjection.name
}

association ServiceHasQueryCriteria
{
    queryService                  : Service[0..1];
    queryCriteria                 : Criteria[0..1] owned;

    relationship this.queryCriteriaId == Criteria.id
}

association ServiceHasAuthorizeCriteria
{
    authorizeService                  : Service[0..1];
    authorizeCriteria                 : Criteria[0..1] owned;

    relationship this.authorizeCriteriaId == Criteria.id
}

association ServiceHasValidateCriteria
{
    validateService                  : Service[0..1];
    validateCriteria                 : Criteria[0..1] owned;

    relationship this.validateCriteriaId == Criteria.id
}

association ServiceHasConflictCriteria
{
    conflictService                  : Service[0..1];
    conflictCriteria                 : Criteria[0..1] owned;

    relationship this.conflictCriteriaId == Criteria.id
}

class ServiceOrderBy
{
    serviceGroupName: String key private maximumLength(256);
    serviceUrlString: String key private maximumLength(8192);
    serviceVerb: Verb key private;
    thisMemberReferencePathId     : Long key private;
    orderByDirection: OrderByDirection;
    ordinal: Integer private;
}

association ServiceHasOrderBy
{
    service                       : Service[1..1];
    orderBys                      : ServiceOrderBy[0..*] owned
        orderBy: this.ordinal ascending;

    relationship this.serviceGroupName == ServiceOrderBy.serviceGroupName
            && this.urlString == ServiceOrderBy.serviceUrlString
            && this.verb == ServiceOrderBy.serviceVerb
}

association ServiceOrderByHasMemberReferencePath
{
    serviceOrderBy                : ServiceOrderBy[0..1];
    thisMemberReferencePath       : ThisMemberReferencePath[1..1];
}

projection EnumerationLiteralProjection on EnumerationLiteral
{
    name: "NamedElement name",
    prettyName: "EnumerationLiteral prettyName",
}

projection EnumerationProjection on Enumeration
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    enumerationLiterals: EnumerationLiteralProjection,
}

projection PackageableElementProjection on PackageableElement
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    Enumeration.enumerationLiterals: EnumerationLiteralProjection,
    Classifier.superInterfaces: ClassifierInterfaceMappingProjection,
    Classifier.classifierModifiers: ClassifierModifierProjection,
    Classifier.dataTypeProperties: DataTypePropertyProjection,
    Klass.abstractClass: "Klass abstractClass",
    Klass.superClass: {
        NamedElement.name: "NamedElement name",
    },
    /*
    TODO: Support duplicate property names with different class names inside projections
    Klass.associationEnds: {
        NamedElement.name: "NamedElement name",
    },
    */
    Klass.parameterizedProperties: ParameterizedPropertyProjection,
    Association.associationEnds: AssociationEndProjection,
    Association.criteria: {
        Criteria.id: "Criteria id",
    },
    NamedProjection.rootProjection: {
        ProjectionElement.id: "ProjectionElement id",
    },
    ServiceGroup.owningClass: {
        NamedElement.name: "NamedElement name",
    },
    ServiceGroup.urls: UrlProjection,
}

projection ClassifierModifierProjection on ClassifierModifier
{
    keyword: "ClassifierModifier keyword",
}

projection ClassifierInterfaceMappingProjection on ClassifierInterfaceMapping
{
    superInterface: {
        name: "NamedElement name",
    },
}

projection ParameterizedPropertyProjection on ParameterizedProperty
{
    name: "NamedElement name",
    multiplicity: "ParameterizedProperty multiplicity",
    resultType: {
        name: "NamedElement name",
    },
    parameterizedPropertyOrderings: ParameterizedPropertyOrderingProjection,
    parameters: {
        name: "NamedElement name",
    },
}

projection ParameterizedPropertyOrderingProjection on ParameterizedPropertyOrdering
{
    ordinal: "ParameterizedPropertyOrdering orderingId",
}

projection ProjectionElementProjection on ProjectionElement
{
    id: "ProjectionElement id",
    name: "ProjectionElement name",
    children: ProjectionElementProjection,
    RootProjection.classifier: {
        name: "NamedElement name",
    },
    ProjectionWithAssociationEnd.associationEnd: {
        owningClass: {
            name: "NamedElement name",
        },
        name: "NamedElement name",
    },
    ProjectionProjectionReference.projection: {
        name: "NamedElement name",
    },
    ProjectionDataTypeProperty.dataTypeProperty: {
        owningClassifier: {
            name: "NamedElement name",
        },
        name: "NamedElement name",
    },
}

projection NamedProjectionProjection on NamedProjection
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    rootProjection: ProjectionElementProjection,
}

projection ServiceGroupProjection on ServiceGroup
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    owningClass: {
        name: "NamedElement name",
    },
    urls: UrlProjection,
}

projection UrlProjection on Url
{
    url: "Url url",
    parameters: UrlParameterProjection,
    services: ServiceProjection,
}

projection ParameterProjection on Parameter
{
    id: "Parameter id",
    name: "Parameter name",
    multiplicity: "Parameter multiplicity",
    EnumerationParameter.enumeration: {
        NamedElement.name: "NamedElement name",
    },
    PrimitiveParameter.primitiveType: "PrimitiveParameter primitiveType",
}

projection UrlParameterProjection on UrlParameter
{
    type: "UrlParameter type",
    parameter: ParameterProjection,
}

projection ServiceProjection on Service
{
    verb: "Service verb",
    serviceMultiplicity: "Service serviceMultiplicity",
    projection: {
        name: "NamedElement name",
    },
    queryCriteria: CriteriaProjection,
    authorizeCriteria: CriteriaProjection,
    validateCriteria: CriteriaProjection,
    conflictCriteria: CriteriaProjection,
    orderBys: ServiceOrderByProjection,
}

projection ServiceOrderByProjection on ServiceOrderBy
{
    orderByDirection: "ServiceOrderBy orderByDirection",
    thisMemberReferencePath: {
        id: "ExpressionValue id",
    },
}

service PackageableElementResource on PackageableElement
{
    /meta/packageableElement/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : PackageableElementProjection;
        }
    /meta/packageableElement
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : PackageableElementProjection;
            orderBy     : this.ordinal ascending;
        }
}

service EnumerationResource on Enumeration
{
    /meta/enumeration/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : EnumerationProjection;
        }
    /meta/enumeration
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : EnumerationProjection;
            orderBy     : this.ordinal ascending;
        }
}

projection InterfaceProjection on Interface
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    superInterfaces: ClassifierInterfaceMappingProjection,
    classifierModifiers: ClassifierModifierProjection,
    dataTypeProperties: DataTypePropertyProjection,
}

service InterfaceResource on Interface
{
    /meta/interface/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : InterfaceProjection;
        }
    /meta/interface
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : InterfaceProjection;
            orderBy     : this.ordinal ascending;
        }
}

projection NumericPropertyValidationProjection on NumericPropertyValidation
{
    number: "NumericPropertyValidation number",
}

projection DataTypePropertyProjection on DataTypeProperty
{
    name: "NamedElement name",
    optional: "DataTypeProperty optional",
    minLengthValidation: NumericPropertyValidationProjection,
    maxLengthValidation: NumericPropertyValidationProjection,
    propertyModifiers: {
        keyword: "PropertyModifier keyword",
    },
    PrimitiveProperty.primitiveType: "PrimitiveProperty primitiveType",
    PrimitiveProperty.minValidation: NumericPropertyValidationProjection,
    PrimitiveProperty.maxValidation: NumericPropertyValidationProjection,
    EnumerationProperty.enumeration: {
        NamedElement.name: "NamedElement name",
    },
}

projection KlassProjection on Klass
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    abstractClass: "Klass abstractClass",
    superInterfaces: ClassifierInterfaceMappingProjection,
    classifierModifiers: ClassifierModifierProjection,
    dataTypeProperties: DataTypePropertyProjection,
    superClass: {
        name: "NamedElement name",
    },
    associationEnds: {
        name: "NamedElement name",
    },
    parameterizedProperties: ParameterizedPropertyProjection,
}

service KlassResource on Klass
{
    /meta/class/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : KlassProjection;
        }
    /meta/class
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : KlassProjection;
            orderBy     : this.ordinal ascending;
        }
}

projection ClassifierProjection on Classifier
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    superInterfaces: ClassifierInterfaceMappingProjection,
    classifierModifiers: ClassifierModifierProjection,
    dataTypeProperties: DataTypePropertyProjection,
    Klass.abstractClass: "Klass abstractClass",
    Klass.superClass: {
        NamedElement.name: "NamedElement name",
    },
    Klass.associationEnds: {
        NamedElement.name: "NamedElement name",
    },
    Klass.parameterizedProperties: ParameterizedPropertyProjection,
}

service ClassifierResource on Classifier
{
    /meta/classifier/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : ClassifierProjection;
        }
    /meta/classifier
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : ClassifierProjection;
            orderBy     : this.ordinal ascending;
        }
}

projection ThisMemberReferencePathProjection on ThisMemberReferencePath
{
    id: "ExpressionValue id",
    klass: {
        name: "NamedElement name",
    },
    associationEnds  : MemberReferencePathAssociationEndMappingProjection,
    dataTypeProperty :
    {
        owningClassifier:
        {
            name       : "NamedElement name",
        },
        name: "NamedElement name",
    },
}

projection AssociationEndModifierProjection on AssociationEndModifier
{
    keyword: "AssociationEndModifier keyword",
}

projection AssociationEndOrderByProjection on AssociationEndOrderBy
{
    orderByDirection: "AssociationEndOrderBy orderByDirection",
    thisMemberReferencePath: {
        id: "ExpressionValue id",
    },
}

projection AssociationEndProjection on AssociationEnd
{
    name: "NamedElement name",
    direction: "AssociationEnd direction",
    multiplicity: "AssociationEnd multiplicity",
    resultType: {
        name: "NamedElement name",
    },
    associationEndModifiers: AssociationEndModifierProjection,
    orderBys: AssociationEndOrderByProjection,
}

projection MemberReferencePathAssociationEndMappingProjection on MemberReferencePathAssociationEndMapping
{
    associationEnd:
    {
        owningClass:
        {
            name       : "NamedElement name",
        },
        name            : "NamedElement name",
    },
}

projection ExpressionValueProjection on ExpressionValue
{
    id: "ExpressionValue id",
    VariableReference.parameter: {
        id: "Parameter id",
        name: "Parameter name",
    },
    MemberReferencePath.klass: {
        name: "NamedElement name",
    },
    MemberReferencePath.associationEnds: MemberReferencePathAssociationEndMappingProjection,
    MemberReferencePath.dataTypeProperty :
    {
        owningClassifier:
        {
            name       : "NamedElement name",
        },
        name: "NamedElement name",
    },
}

projection MemberReferencePathProjection on MemberReferencePath
{
    id: "ExpressionValue id",
    klass: {
        name: "NamedElement name",
    },
    associationEnds: MemberReferencePathAssociationEndMappingProjection,
    dataTypeProperty: {
        owningClassifier: {
            name: "NamedElement name",
        },
        name: "NamedElement name",
    },
}

projection CriteriaProjection on Criteria
{
    BinaryCriteria.left                   : CriteriaProjection,
    BinaryCriteria.right                  : CriteriaProjection,
    OperatorCriteria.operator: "OperatorCriteria operator",
    OperatorCriteria.sourceExpressionValue: ExpressionValueProjection,
    OperatorCriteria.targetExpressionValue: ExpressionValueProjection,
    EdgePointCriteria.memberReferencePath : MemberReferencePathProjection,
}

projection AssociationProjection on Association
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    associationEnds: AssociationEndProjection,
    criteria               : CriteriaProjection,
}

service AssociationResource on Association
{
    /meta/association/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : AssociationProjection;
        }
    /meta/association
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : AssociationProjection;
            orderBy     : this.ordinal ascending;
        }
}

service NamedProjectionResource on NamedProjection
{
    /meta/projection/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : NamedProjectionProjection;
        }
    /meta/projection
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : NamedProjectionProjection;
            orderBy     : this.ordinal ascending;
        }
}

service ServiceGroupResource on ServiceGroup
{
    /meta/serviceGroup/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : ServiceGroupProjection;
        }
    /meta/serviceGroup
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : ServiceGroupProjection;
            orderBy     : this.ordinal ascending;
        }
}
