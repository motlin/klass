package klass.model.meta.domain.inference

/*
 * Auto-generated by {@link cool.klass.generator.klass.projection.KlassProjectionGenerator}
 */


projection NamedElementProjection on NamedElement
{
    name: "NamedElement name",
}

projection PackageableElementProjection on PackageableElement
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    Enumeration.enumerationLiterals: EnumerationLiteralProjection,
    Classifier.superInterfaces: ClassifierInterfaceMappingProjection,
    Classifier.classifierModifiers: ClassifierModifierProjection,
    Classifier.dataTypeProperties: DataTypePropertyProjection,
    Klass.abstractClass: "Klass abstractClass",
    Klass.superClass: {
        NamedElement.name: "NamedElement name",
    },
    Klass.associationEnds: {
        NamedElement.name: "NamedElement name",
    },
    Klass.parameterizedProperties: ParameterizedPropertyProjection,
    Association.associationEnds: AssociationEndProjection,
    Association.criteria: CriteriaProjection,
    NamedProjection.rootProjection: {
        ProjectionElement.id: "ProjectionElement id",
    },
    ServiceGroup.owningClass: {
        NamedElement.name: "NamedElement name",
    },
    ServiceGroup.urls: UrlProjection,
}

projection EnumerationProjection on Enumeration
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    enumerationLiterals: EnumerationLiteralProjection,
}

projection EnumerationLiteralProjection on EnumerationLiteral
{
    name: "NamedElement name",
    prettyName: "EnumerationLiteral prettyName",
}

projection ClassifierProjection on Classifier
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    superInterfaces: ClassifierInterfaceMappingProjection,
    classifierModifiers: ClassifierModifierProjection,
    dataTypeProperties: DataTypePropertyProjection,
    Klass.abstractClass: "Klass abstractClass",
    Klass.superClass: {
        NamedElement.name: "NamedElement name",
    },
    Klass.associationEnds: {
        NamedElement.name: "NamedElement name",
    },
    Klass.parameterizedProperties: ParameterizedPropertyProjection,
}

projection InterfaceProjection on Interface
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    superInterfaces: ClassifierInterfaceMappingProjection,
    classifierModifiers: ClassifierModifierProjection,
    dataTypeProperties: DataTypePropertyProjection,
}

projection ClassifierInterfaceMappingProjection on ClassifierInterfaceMapping
{
    superInterface: {
        name: "NamedElement name",
    },
}

projection ClassifierModifierProjection on ClassifierModifier
{
    keyword: "ClassifierModifier keyword",
}

projection KlassProjection on Klass
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    abstractClass: "Klass abstractClass",
    superInterfaces: ClassifierInterfaceMappingProjection,
    classifierModifiers: ClassifierModifierProjection,
    dataTypeProperties: DataTypePropertyProjection,
    superClass: {
        name: "NamedElement name",
    },
    associationEnds: {
        name: "NamedElement name",
    },
    parameterizedProperties: ParameterizedPropertyProjection,
}

projection DataTypePropertyProjection on DataTypeProperty
{
    name: "NamedElement name",
    optional: "DataTypeProperty optional",
    minLengthValidation: MinLengthPropertyValidationProjection,
    maxLengthValidation: MaxLengthPropertyValidationProjection,
    propertyModifiers: {
        keyword: "PropertyModifier keyword",
    },
    PrimitiveProperty.primitiveType: "PrimitiveProperty primitiveType",
    PrimitiveProperty.minValidation: MinPropertyValidationProjection,
    PrimitiveProperty.maxValidation: MaxPropertyValidationProjection,
    EnumerationProperty.enumeration: {
        NamedElement.name: "NamedElement name",
    },
}

projection PrimitivePropertyProjection on PrimitiveProperty
{
    name: "NamedElement name",
    optional: "DataTypeProperty optional",
    primitiveType: "PrimitiveProperty primitiveType",
    minLengthValidation: MinLengthPropertyValidationProjection,
    maxLengthValidation: MaxLengthPropertyValidationProjection,
    propertyModifiers: {
        keyword: "PropertyModifier keyword",
    },
    minValidation: MinPropertyValidationProjection,
    maxValidation: MaxPropertyValidationProjection,
}

projection EnumerationPropertyProjection on EnumerationProperty
{
    name: "NamedElement name",
    optional: "DataTypeProperty optional",
    minLengthValidation: MinLengthPropertyValidationProjection,
    maxLengthValidation: MaxLengthPropertyValidationProjection,
    propertyModifiers: {
        keyword: "PropertyModifier keyword",
    },
    enumeration: {
        name: "NamedElement name",
    },
}

projection NumericPropertyValidationProjection on NumericPropertyValidation
{
    number: "NumericPropertyValidation number",
}

projection MinLengthPropertyValidationProjection on MinLengthPropertyValidation
{
    number: "NumericPropertyValidation number",
}

projection MaxLengthPropertyValidationProjection on MaxLengthPropertyValidation
{
    number: "NumericPropertyValidation number",
}

projection MinPropertyValidationProjection on MinPropertyValidation
{
    number: "NumericPropertyValidation number",
}

projection MaxPropertyValidationProjection on MaxPropertyValidation
{
    number: "NumericPropertyValidation number",
}

projection PropertyModifierProjection on PropertyModifier
{
    keyword: "PropertyModifier keyword",
}

projection ParameterProjection on Parameter
{
    id: "Parameter id",
    name: "Parameter name",
    multiplicity: "Parameter multiplicity",
    EnumerationParameter.enumeration: {
        NamedElement.name: "NamedElement name",
    },
    PrimitiveParameter.primitiveType: "PrimitiveParameter primitiveType",
}

projection EnumerationParameterProjection on EnumerationParameter
{
    id: "Parameter id",
    name: "Parameter name",
    multiplicity: "Parameter multiplicity",
    enumeration: {
        name: "NamedElement name",
    },
}

projection PrimitiveParameterProjection on PrimitiveParameter
{
    id: "Parameter id",
    name: "Parameter name",
    multiplicity: "Parameter multiplicity",
    primitiveType: "PrimitiveParameter primitiveType",
}

projection ExpressionValueProjection on ExpressionValue
{
    id: "ExpressionValue id",
    VariableReference.parameter: {
        Parameter.id: "Parameter id",
    },
    MemberReferencePath.klass: {
        NamedElement.name: "NamedElement name",
    },
    MemberReferencePath.associationEnds: MemberReferencePathAssociationEndMappingProjection,
    MemberReferencePath.dataTypeProperty: {
        NamedElement.name: "NamedElement name",
    },
}

projection UserLiteralProjection on UserLiteral
{
    id: "ExpressionValue id",
}

projection NullLiteralProjection on NullLiteral
{
    id: "ExpressionValue id",
}

projection VariableReferenceProjection on VariableReference
{
    id: "ExpressionValue id",
    parameter: {
        id: "Parameter id",
    },
}

projection MemberReferencePathProjection on MemberReferencePath
{
    id: "ExpressionValue id",
    klass: {
        name: "NamedElement name",
    },
    associationEnds: MemberReferencePathAssociationEndMappingProjection,
    dataTypeProperty: {
        name: "NamedElement name",
    },
}

projection CriteriaProjection on Criteria
{
    id: "Criteria id",
    string: "Criteria string",
    BinaryCriteria.left: {
        Criteria.id: "Criteria id",
    },
    BinaryCriteria.right: {
        Criteria.id: "Criteria id",
    },
    OperatorCriteria.operator: "OperatorCriteria operator",
    OperatorCriteria.sourceExpressionValue: ExpressionValueProjection,
    OperatorCriteria.targetExpressionValue: ExpressionValueProjection,
    EdgePointCriteria.memberReferencePath: {
        ExpressionValue.id: "ExpressionValue id",
    },
}

projection AllCriteriaProjection on AllCriteria
{
    id: "Criteria id",
    string: "Criteria string",
}

projection BinaryCriteriaProjection on BinaryCriteria
{
    id: "Criteria id",
    string: "Criteria string",
    left: {
        id: "Criteria id",
    },
    right: {
        id: "Criteria id",
    },
}

projection AndCriteriaProjection on AndCriteria
{
    id: "Criteria id",
    string: "Criteria string",
    left: {
        id: "Criteria id",
    },
    right: {
        id: "Criteria id",
    },
}

projection OrCriteriaProjection on OrCriteria
{
    id: "Criteria id",
    string: "Criteria string",
    left: {
        id: "Criteria id",
    },
    right: {
        id: "Criteria id",
    },
}

projection OperatorCriteriaProjection on OperatorCriteria
{
    id: "Criteria id",
    string: "Criteria string",
    operator: "OperatorCriteria operator",
    sourceExpressionValue: ExpressionValueProjection,
    targetExpressionValue: ExpressionValueProjection,
}

projection EdgePointCriteriaProjection on EdgePointCriteria
{
    id: "Criteria id",
    string: "Criteria string",
    memberReferencePath: {
        id: "ExpressionValue id",
    },
}

projection AssociationProjection on Association
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    associationEnds: AssociationEndProjection,
    criteria: CriteriaProjection,
}

projection AssociationEndProjection on AssociationEnd
{
    name: "NamedElement name",
    direction: "AssociationEnd direction",
    multiplicity: "AssociationEnd multiplicity",
    resultType: {
        name: "NamedElement name",
    },
    associationEndModifiers: AssociationEndModifierProjection,
    orderBys: AssociationEndOrderByProjection,
}

projection AssociationEndModifierProjection on AssociationEndModifier
{
    keyword: "AssociationEndModifier keyword",
}

projection MemberReferencePathAssociationEndMappingProjection on MemberReferencePathAssociationEndMapping
{
    associationEnd: {
        name: "NamedElement name",
    },
}

projection ThisMemberReferencePathProjection on ThisMemberReferencePath
{
    id: "ExpressionValue id",
    klass: {
        name: "NamedElement name",
    },
    associationEnds: MemberReferencePathAssociationEndMappingProjection,
    dataTypeProperty: {
        name: "NamedElement name",
    },
}

projection TypeMemberReferencePathProjection on TypeMemberReferencePath
{
    id: "ExpressionValue id",
    klass: {
        name: "NamedElement name",
    },
    associationEnds: MemberReferencePathAssociationEndMappingProjection,
    dataTypeProperty: {
        name: "NamedElement name",
    },
}

projection ParameterizedPropertyProjection on ParameterizedProperty
{
    name: "NamedElement name",
    multiplicity: "ParameterizedProperty multiplicity",
    resultType: {
        name: "NamedElement name",
    },
    parameterizedPropertyOrderings: ParameterizedPropertyOrderingProjection,
    parameters: {
        name: "NamedElement name",
    },
}

projection AssociationEndOrderByProjection on AssociationEndOrderBy
{
    orderByDirection: "AssociationEndOrderBy orderByDirection",
    thisMemberReferencePath: {
        id: "ExpressionValue id",
    },
}

projection ParameterizedPropertyOrderingProjection on ParameterizedPropertyOrdering
{
    ordinal: "ParameterizedPropertyOrdering ordinal",
}

projection ParameterizedPropertyParameterProjection on ParameterizedPropertyParameter
{
    name: "NamedElement name",
}

projection ProjectionElementProjection on ProjectionElement
{
    id: "ProjectionElement id",
    name: "ProjectionElement name",
    children: {
        id: "ProjectionElement id",
    },
    parent: {
        id: "ProjectionElement id",
    },
    RootProjection.classifier: {
        NamedElement.name: "NamedElement name",
    },
    ProjectionWithAssociationEnd.associationEnd: {
        NamedElement.name: "NamedElement name",
    },
    ProjectionProjectionReference.projection: {
        NamedElement.name: "NamedElement name",
    },
    ProjectionDataTypeProperty.dataTypeProperty: {
        NamedElement.name: "NamedElement name",
    },
}

projection RootProjectionProjection on RootProjection
{
    id: "ProjectionElement id",
    name: "ProjectionElement name",
    children: {
        id: "ProjectionElement id",
    },
    parent: {
        id: "ProjectionElement id",
    },
    classifier: {
        name: "NamedElement name",
    },
}

projection NamedProjectionProjection on NamedProjection
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    rootProjection: {
        id: "ProjectionElement id",
    },
}

projection ProjectionWithAssociationEndProjection on ProjectionWithAssociationEnd
{
    id: "ProjectionElement id",
    name: "ProjectionElement name",
    children: {
        id: "ProjectionElement id",
    },
    parent: {
        id: "ProjectionElement id",
    },
    associationEnd: {
        name: "NamedElement name",
    },
    ProjectionProjectionReference.projection: {
        NamedElement.name: "NamedElement name",
    },
}

projection ProjectionReferencePropertyProjection on ProjectionReferenceProperty
{
    id: "ProjectionElement id",
    name: "ProjectionElement name",
    children: {
        id: "ProjectionElement id",
    },
    parent: {
        id: "ProjectionElement id",
    },
    associationEnd: {
        name: "NamedElement name",
    },
}

projection ProjectionProjectionReferenceProjection on ProjectionProjectionReference
{
    id: "ProjectionElement id",
    name: "ProjectionElement name",
    children: {
        id: "ProjectionElement id",
    },
    parent: {
        id: "ProjectionElement id",
    },
    associationEnd: {
        name: "NamedElement name",
    },
    projection: {
        name: "NamedElement name",
    },
}

projection ProjectionDataTypePropertyProjection on ProjectionDataTypeProperty
{
    id: "ProjectionElement id",
    name: "ProjectionElement name",
    children: {
        id: "ProjectionElement id",
    },
    parent: {
        id: "ProjectionElement id",
    },
    dataTypeProperty: {
        name: "NamedElement name",
    },
}

projection ServiceGroupProjection on ServiceGroup
{
    name: "NamedElement name",
    packageName: "PackageableElement packageName",
    owningClass: {
        name: "NamedElement name",
    },
    urls: UrlProjection,
}

projection UrlProjection on Url
{
    url: "Url url",
    parameters: UrlParameterProjection,
    services: ServiceProjection,
}

projection UrlParameterProjection on UrlParameter
{
    type: "UrlParameter type",
    parameter: {
        id: "Parameter id",
    },
}

projection ServiceProjection on Service
{
    verb: "Service verb",
    serviceMultiplicity: "Service serviceMultiplicity",
    projection: {
        name: "NamedElement name",
    },
    queryCriteria: CriteriaProjection,
    authorizeCriteria: CriteriaProjection,
    validateCriteria: CriteriaProjection,
    conflictCriteria: CriteriaProjection,
    orderBys: ServiceOrderByProjection,
}

projection ServiceOrderByProjection on ServiceOrderBy
{
    orderByDirection: "ServiceOrderBy orderByDirection",
    thisMemberReferencePath: {
        id: "ExpressionValue id",
    },
}
